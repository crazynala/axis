generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum ColorScheme {
    light
    dark
}

enum ProductType {
    CMT
    Fabric
    Finished
    Trim
    Service
}

enum CompanyType {
    vendor
    customer
    other
}

enum UsageType {
    cut
    make
}

model Product {
    id                   Int                   @id @default(autoincrement())
    sku                  String?               @unique
    name                 String?
    description          String?
    type                 ProductType?
    supplierId           Int?
    customerId           Int?
    costPrice            Float?
    currencyId           Int?
    purchaseTaxId        Int?
    categoryId           Int?
    subCategory          String?
    pricingGroupId       Int?
    manualSalePrice      Float?
    autoSalePrice        Float?
    variantSetId         Int?
    stockTrackingEnabled Boolean               @default(false)
    batchTrackingEnabled Boolean               @default(false)
    isActive             Boolean?
    notes                String?
    supplier             Company?              @relation("Supplier", fields: [supplierId], references: [id])
    customer             Company?              @relation("Customer", fields: [customerId], references: [id])
    currency             ValueList?            @relation("Currency", fields: [currencyId], references: [id])
    purchaseTax          ValueList?            @relation("Tax", fields: [purchaseTaxId], references: [id])
    category             ValueList?            @relation("Category", fields: [categoryId], references: [id])
    pricingGroup         SupplierPricingGroup? @relation(fields: [pricingGroupId], references: [id])
    variantSet           VariantSet?           @relation(fields: [variantSetId], references: [id])
    productLines         ProductLine[]         @relation("ParentProduct")
    batches              Batch[]
    productMovements     ProductMovementLine[]
    Costing              Costing[]
    ProductLine          ProductLine[]
    Variant              Variant[]
    // Removed: back-relations to assemblies and activities to decouple history
    // Optional inverse for assemblies' primary product relation
    // primaryAssemblies     Assembly[]            @relation("AssemblyPrimaryProduct")
    // Metadata
    createdBy            String?
    modifiedBy           String?
    createdAt            DateTime?             @default(now())
    updatedAt            DateTime?             @updatedAt
}

model Company {
    id                Int                    @id @default(autoincrement())
    name              String?
    address           String?
    city              String?
    state             String?
    zip               String?
    country           String?
    phone             String?
    email             String?
    website           String?
    notes             String?
    isActive          Boolean?
    isCarrier         Boolean?
    isCustomer        Boolean?
    isSupplier        Boolean?
    isInactive        Boolean?
    productsSupplied  Product[]              @relation("Supplier")
    productsPurchased Product[]              @relation("Customer")
    pricingGroups     SupplierPricingGroup[]
    jobs              Job[]
    // Metadata
    createdBy         String?
    modifiedBy        String?
    createdAt         DateTime?              @default(now())
    updatedAt         DateTime?              @updatedAt
}

model VariantSet {
    id         Int        @id @default(autoincrement())
    name       String?
    variants   String[]
    products   Product[]
    assemblies Assembly[]
    // Metadata
    createdBy  String?
    modifiedBy String?
    createdAt  DateTime?  @default(now())
    updatedAt  DateTime?  @updatedAt
}

model SupplierPricingGroup {
    id         Int       @id @default(autoincrement())
    name       String?
    supplierId Int?
    products   Product[]
    supplier   Company?  @relation(fields: [supplierId], references: [id])
    // Metadata
    createdBy  String?
    modifiedBy String?
    createdAt  DateTime? @default(now())
    updatedAt  DateTime? @updatedAt
}

model ValueList {
    id               Int       @id @default(autoincrement())
    code             String?
    label            String?
    value            Float?
    type             String?
    productsCurrency Product[] @relation("Currency")
    productsTax      Product[] @relation("Tax")
    productsCategory Product[] @relation("Category")
    // Metadata
    createdBy        String?
    modifiedBy       String?
    createdAt        DateTime? @default(now())
    updatedAt        DateTime? @updatedAt
}

model Assembly {
    id                  Int                @id @default(autoincrement())
    name                String?
    status              String?
    quantity            Float?
    // Breakdown of ordered quantities (e.g., sizes): [0,0,11,12,7,1,0]
    qtyOrderedBreakdown Int[]              @default([])
    notes               String?
    variants            Variant[]
    // Removed direct Batch relation; batches are independent of assemblies
    job                 Job?               @relation(fields: [jobId], references: [id], name: "Job_Assemblies")
    jobId               Int?
    // Link Assembly to original Product by id only (no relation)
    productId           Int?
    // Optional link to a Variant Set (may mirror the Product's variant set)
    variantSetId        Int?
    variantSet          VariantSet?        @relation(fields: [variantSetId], references: [id])
    activities          AssemblyActivity[] @relation("Assembly_Activities")
    costings            Costing[]
    batches             Batch[]
    // Metadata
    createdBy           String?
    modifiedBy          String?
    createdAt           DateTime?          @default(now())
    updatedAt           DateTime?          @updatedAt
}

model Variant {
    id         Int       @id @default(autoincrement())
    productId  Int?
    jobId      Int?
    status     String?
    isActive   Boolean?
    notes      String?
    product    Product?  @relation(fields: [productId], references: [id])
    job        Job?      @relation(fields: [jobId], references: [id])
    costings   Costing[]
    batches    Batch[]
    Assembly   Assembly? @relation(fields: [assemblyId], references: [id])
    assemblyId Int?
    // Metadata
    createdBy  String?
    modifiedBy String?
    createdAt  DateTime? @default(now())
    updatedAt  DateTime? @updatedAt
}

model Costing {
    id                            Int          @id @default(autoincrement())
    assemblyId                    Int?
    componentId                   Int?
    usageType                     UsageType?
    componentType                 ProductType?
    quantityPerUnit               Float?
    unitCost                      Float?
    notes                         String?
    activityUsed                  String?
    salePricePerItem              Float?
    salePricePerUnit              Float?
    flagAssembly                  Boolean?
    flagDefinedInProduct          Boolean?
    flagIsBillableDefaultOrManual Boolean?
    flagIsBillableManual          Boolean?
    flagIsInvoiceableManual       Boolean?
    flagStockTracked              Boolean?
    assembly                      Assembly?    @relation(fields: [assemblyId], references: [id])
    component                     Product?     @relation(fields: [componentId], references: [id])
    Variant                       Variant?     @relation(fields: [variantId], references: [id])
    variantId                     Int?
    // Metadata
    createdBy                     String?
    modifiedBy                    String?
    createdAt                     DateTime?    @default(now())
    updatedAt                     DateTime?    @updatedAt
}

model ProductLine {
    id               Int       @id @default(autoincrement())
    parentId         Int?
    childId          Int?
    quantity         Float?
    unitCost         Float?
    unitCostManual   Float?
    activityUsed     String?
    flagAssemblyOmit Boolean?
    parent           Product?  @relation("ParentProduct", fields: [parentId], references: [id])
    child            Product?  @relation(fields: [childId], references: [id])
    // Metadata
    createdBy        String?
    modifiedBy       String?
    createdAt        DateTime? @default(now())
    updatedAt        DateTime? @updatedAt
}

model Location {
    id                    Int                @id @default(autoincrement())
    name                  String?
    type                  String?
    is_active             Boolean?
    notes                 String?
    batches               Batch[]
    ProductMovement       ProductMovement[]
    jobsIn                Job[]              @relation("Job_LocationIn")
    jobsOut               Job[]              @relation("Job_LocationOut")
    assemblyActivitiesIn  AssemblyActivity[] @relation("AssemblyActivity_LocationIn")
    assemblyActivitiesOut AssemblyActivity[] @relation("AssemblyActivity_LocationOut")
    // Metadata
    createdBy             String?
    modifiedBy            String?
    createdAt             DateTime?          @default(now())
    updatedAt             DateTime?          @updatedAt
}

model Batch {
    id                  Int                   @id @default(autoincrement())
    productId           Int?
    locationId          Int?
    jobId               Int?
    assemblyId          Int?
    codeMill            String?
    codeSartor          String?
    name                String?
    source              String?
    quantity            Float?
    receivedAt          DateTime?
    notes               String?
    product             Product?              @relation(fields: [productId], references: [id])
    location            Location?             @relation(fields: [locationId], references: [id])
    job                 Job?                  @relation(fields: [jobId], references: [id])
    assembly            Assembly?             @relation(fields: [assemblyId], references: [id])
    ProductMovementLine ProductMovementLine[]
    Variant             Variant?              @relation(fields: [variantId], references: [id])
    variantId           Int?
    // Metadata
    createdBy           String?
    modifiedBy          String?
    createdAt           DateTime?             @default(now())
    updatedAt           DateTime?             @updatedAt
}

model ProductMovement {
    id                  Int                   @id @default(autoincrement())
    movementType        String?
    date                DateTime?
    locationId          Int?
    // New mapped fields (scalars for import mapping)
    assemblyActivityId  Int?
    assemblyId          Int?
    costingId           Int?
    expenseId           Int?
    jobId               Int?
    locationInId        Int?
    locationOutId       Int?
    shippingType        String?
    productId           Int?
    quantity            Float?
    purchaseOrderLineId Int?
    shippingLineId      Int?
    notes               String?
    lines               ProductMovementLine[]
    location            Location?             @relation(fields: [locationId], references: [id])
    // Metadata
    createdBy           String?
    modifiedBy          String?
    createdAt           DateTime?             @default(now())
    updatedAt           DateTime?             @updatedAt
}

model ProductMovementLine {
    id                  Int              @id @default(autoincrement())
    movementId          Int?
    productId           Int?
    batchId             Int?
    costingId           Int?
    productMovementId   Int?
    purchaseOrderLineId Int?
    quantity            Float?
    notes               String?
    movement            ProductMovement? @relation(fields: [movementId], references: [id])
    product             Product?         @relation(fields: [productId], references: [id])
    batch               Batch?           @relation(fields: [batchId], references: [id])
    // Metadata
    createdBy           String?
    modifiedBy          String?
    createdAt           DateTime?        @default(now())
    updatedAt           DateTime?        @updatedAt

    @@index([productId], map: "idx_product_movement_line_product_id")
}

model Job {
    id                      Int                @id @default(autoincrement())
    projectCode             String?            @unique
    name                    String?
    description             String?
    startDate               DateTime?
    endDate                 DateTime?
    status                  String?
    jobType                 String?
    isActive                Boolean?
    notes                   String?
    endCustomerName         String?
    companyId               Int?
    company                 Company?           @relation(fields: [companyId], references: [id])
    locationInId            Int?
    locationOutId           Int?
    locationIn              Location?          @relation("Job_LocationIn", fields: [locationInId], references: [id])
    locationOut             Location?          @relation("Job_LocationOut", fields: [locationOutId], references: [id])
    customerOrderDate       DateTime?
    customerOrderDateManual DateTime?
    cutSubmissionDate       DateTime?
    dropDeadDate            DateTime?
    finishDate              DateTime?
    finishDateManual        DateTime?
    firstInvoiceDate        DateTime?
    targetDate              DateTime?
    Variant                 Variant[]
    assemblyActivities      AssemblyActivity[]
    assemblies              Assembly[]         @relation("Job_Assemblies")
    batches                 Batch[]
    // Metadata
    createdBy               String?
    modifiedBy              String?
    createdAt               DateTime?          @default(now())
    updatedAt               DateTime?          @updatedAt
}

model SavedView {
    id         Int      @id @default(autoincrement())
    module     String
    name       String
    params     Json
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    createdBy  String?
    modifiedBy String?
}

model AssemblyActivity {
    id                       Int       @id @default(autoincrement())
    assemblyId               Int?
    jobId                    Int?
    name                     String?
    description              String?
    activityType             String?
    activityDate             DateTime?
    startTime                DateTime?
    endTime                  DateTime?
    status                   String?
    notes                    String?
    productId                Int?
    locationInId             Int?
    locationOutId            Int?
    locationIn               Location? @relation("AssemblyActivity_LocationIn", fields: [locationInId], references: [id])
    locationOut              Location? @relation("AssemblyActivity_LocationOut", fields: [locationOutId], references: [id])
    quantity                 Float?
    qtyFabricConsumed        Float?
    qtyFabricConsumedPerUnit Float?
    qtyBreakdown             Int[]     @default([])
    assembly                 Assembly? @relation(fields: [assemblyId], references: [id], name: "Assembly_Activities")
    job                      Job?      @relation(fields: [jobId], references: [id])
    // Metadata
    createdBy                String?
    modifiedBy               String?
    createdAt                DateTime? @default(now())
    updatedAt                DateTime? @updatedAt
}

// --- Auth models ---
model User {
    id             Int             @id @default(autoincrement())
    email          String          @unique
    passwordHash   String
    name           String?
    recordsPerPage Int             @default(25)
    isActive       Boolean         @default(true)
    colorScheme    ColorScheme     @default(light)
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    resets         PasswordReset[]
}

model PasswordReset {
    id        Int       @id @default(autoincrement())
    userId    Int
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    otp       String
    token     String    @unique
    expiresAt DateTime
    usedAt    DateTime?
    createdAt DateTime  @default(now())
}
