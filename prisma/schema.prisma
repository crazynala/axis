generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum ColorScheme {
    light
    dark
}

enum ProductType {
    CMT
    Fabric
    Finished
    Trim
    Service
}

enum CompanyType {
    vendor
    customer
    other
}

enum UsageType {
    cut
    make
}

model Product {
    id                   Int                   @id @default(autoincrement())
    sku                  String?               @unique
    name                 String?
    description          String?
    type                 ProductType?
    supplierId           Int?
    customerId           Int?
    costPrice            Float?
    currencyId           Int?
    purchaseTaxId        Int?
    categoryId           Int?
    subCategory          String?
    pricingGroupId       Int?
    manualSalePrice      Float?
    autoSalePrice        Float?
    variantSetId         Int?
    stockTrackingEnabled Boolean               @default(false)
    batchTrackingEnabled Boolean               @default(false)
    isActive             Boolean?
    notes                String?
    supplier             Company?              @relation("Supplier", fields: [supplierId], references: [id])
    customer             Company?              @relation("Customer", fields: [customerId], references: [id])
    currency             ValueList?            @relation("Currency", fields: [currencyId], references: [id])
    purchaseTax          ValueList?            @relation("Tax", fields: [purchaseTaxId], references: [id])
    category             ValueList?            @relation("Category", fields: [categoryId], references: [id])
    pricingGroup         SupplierPricingGroup? @relation(fields: [pricingGroupId], references: [id])
    variantSet           VariantSet?           @relation(fields: [variantSetId], references: [id])
    productLines         ProductLine[]         @relation("ParentProduct")
    batches              Batch[]
    productMovements     ProductMovementLine[]
    Costing              Costing[]
    ProductLine          ProductLine[]
    Variant              Variant[]
    // Back-relations
    invoiceLines         InvoiceLine[]
    shipmentLines        ShipmentLine[]
    expenses             Expense[]
    // Back-relations: Purchase Orders
    purchaseOrderLines   PurchaseOrderLine[]
    // Removed: back-relations to assemblies and activities to decouple history
    // Optional inverse for assemblies' primary product relation
    // primaryAssemblies     Assembly[]            @relation("AssemblyPrimaryProduct")
    // Metadata
    createdBy            String?
    modifiedBy           String?
    createdAt            DateTime?             @default(now())
    updatedAt            DateTime?             @updatedAt
}

model Company {
    id                        Int                    @id @default(autoincrement())
    name                      String?
    address                   String?
    city                      String?
    state                     String?
    zip                       String?
    country                   String?
    phone                     String?
    email                     String?
    website                   String?
    notes                     String?
    isActive                  Boolean?
    isCarrier                 Boolean?
    isCustomer                Boolean?
    isSupplier                Boolean?
    isInactive                Boolean?
    productsSupplied          Product[]              @relation("Supplier")
    productsPurchased         Product[]              @relation("Customer")
    pricingGroups             SupplierPricingGroup[]
    jobs                      Job[]
    // Back-relations
    invoices                  Invoice[]
    addresses                 Address[]
    shipmentsAsCarrier        Shipment[]             @relation("CarrierCompany")
    shipmentsAsReceiver       Shipment[]             @relation("ReceiverCompany")
    shipmentsAsSender         Shipment[]             @relation("SenderCompany")
    // Back-relations: Purchase Orders
    purchaseOrders            PurchaseOrder[]
    purchaseOrdersAsConsignee PurchaseOrder[]        @relation("POConsignee")
    // Metadata
    createdBy                 String?
    modifiedBy                String?
    createdAt                 DateTime?              @default(now())
    updatedAt                 DateTime?              @updatedAt
}

model VariantSet {
    id            Int            @id @default(autoincrement())
    name          String?
    variants      String[]
    products      Product[]
    assemblies    Assembly[]
    // Back-relations
    shipmentLines ShipmentLine[]
    // Metadata
    createdBy     String?
    modifiedBy    String?
    createdAt     DateTime?      @default(now())
    updatedAt     DateTime?      @updatedAt
}

model SupplierPricingGroup {
    id         Int       @id @default(autoincrement())
    name       String?
    supplierId Int?
    products   Product[]
    supplier   Company?  @relation(fields: [supplierId], references: [id])
    // Metadata
    createdBy  String?
    modifiedBy String?
    createdAt  DateTime? @default(now())
    updatedAt  DateTime? @updatedAt
}

model ValueList {
    id                  Int                 @id @default(autoincrement())
    code                String?
    label               String?
    value               Float?
    type                String?
    productsCurrency    Product[]           @relation("Currency")
    productsTax         Product[]           @relation("Tax")
    productsCategory    Product[]           @relation("Category")
    // Back-relations
    invoiceLinesTaxCode InvoiceLine[]       @relation("TaxCode")
    // Back-relations: Purchase Orders
    poLinesTaxCode      PurchaseOrderLine[] @relation("POL_TaxCode")
    // Metadata
    createdBy           String?
    modifiedBy          String?
    createdAt           DateTime?           @default(now())
    updatedAt           DateTime?           @updatedAt
}

model Assembly {
    id                  Int                @id @default(autoincrement())
    name                String?
    status              String?
    quantity            Float?
    // Breakdown of ordered quantities (e.g., sizes): [0,0,11,12,7,1,0]
    qtyOrderedBreakdown Int[]              @default([])
    notes               String?
    variants            Variant[]
    // Removed direct Batch relation; batches are independent of assemblies
    job                 Job?               @relation(fields: [jobId], references: [id], name: "Job_Assemblies")
    jobId               Int?
    // Link Assembly to original Product by id only (no relation)
    productId           Int?
    // Optional link to a Variant Set (may mirror the Product's variant set)
    variantSetId        Int?
    variantSet          VariantSet?        @relation(fields: [variantSetId], references: [id])
    activities          AssemblyActivity[] @relation("Assembly_Activities")
    costings            Costing[]
    batches             Batch[]
    // Back-relations
    shipmentLines       ShipmentLine[]
    // Metadata
    createdBy           String?
    modifiedBy          String?
    createdAt           DateTime?          @default(now())
    updatedAt           DateTime?          @updatedAt
}

model Variant {
    id         Int       @id @default(autoincrement())
    productId  Int?
    jobId      Int?
    status     String?
    isActive   Boolean?
    notes      String?
    product    Product?  @relation(fields: [productId], references: [id])
    job        Job?      @relation(fields: [jobId], references: [id])
    costings   Costing[]
    batches    Batch[]
    Assembly   Assembly? @relation(fields: [assemblyId], references: [id])
    assemblyId Int?
    // Metadata
    createdBy  String?
    modifiedBy String?
    createdAt  DateTime? @default(now())
    updatedAt  DateTime? @updatedAt
}

model Costing {
    id                            Int           @id @default(autoincrement())
    assemblyId                    Int?
    componentId                   Int?
    usageType                     UsageType?
    componentType                 ProductType?
    quantityPerUnit               Float?
    unitCost                      Float?
    notes                         String?
    activityUsed                  String?
    salePricePerItem              Float?
    salePricePerUnit              Float?
    flagAssembly                  Boolean?
    flagDefinedInProduct          Boolean?
    flagIsBillableDefaultOrManual Boolean?
    flagIsBillableManual          Boolean?
    flagIsInvoiceableManual       Boolean?
    flagStockTracked              Boolean?
    assembly                      Assembly?     @relation(fields: [assemblyId], references: [id])
    component                     Product?      @relation(fields: [componentId], references: [id])
    Variant                       Variant?      @relation(fields: [variantId], references: [id])
    variantId                     Int?
    // Metadata
    createdBy                     String?
    modifiedBy                    String?
    createdAt                     DateTime?     @default(now())
    updatedAt                     DateTime?     @updatedAt
    // Back-relations
    invoiceLines                  InvoiceLine[]
}

model ProductLine {
    id               Int       @id @default(autoincrement())
    parentId         Int?
    childId          Int?
    quantity         Float?
    unitCost         Float?
    unitCostManual   Float?
    activityUsed     String?
    flagAssemblyOmit Boolean?
    parent           Product?  @relation("ParentProduct", fields: [parentId], references: [id])
    child            Product?  @relation(fields: [childId], references: [id])
    // Metadata
    createdBy        String?
    modifiedBy       String?
    createdAt        DateTime? @default(now())
    updatedAt        DateTime? @updatedAt
}

model Location {
    id                    Int                @id @default(autoincrement())
    name                  String?
    type                  String?
    is_active             Boolean?
    notes                 String?
    batches               Batch[]
    ProductMovement       ProductMovement[]
    jobsIn                Job[]              @relation("Job_LocationIn")
    jobsOut               Job[]              @relation("Job_LocationOut")
    assemblyActivitiesIn  AssemblyActivity[] @relation("AssemblyActivity_LocationIn")
    assemblyActivitiesOut AssemblyActivity[] @relation("AssemblyActivity_LocationOut")
    // Back-relations
    shipments             Shipment[]
    shipmentLines         ShipmentLine[]
    // Back-relations: Purchase Orders
    purchaseOrders        PurchaseOrder[]
    // Metadata
    createdBy             String?
    modifiedBy            String?
    createdAt             DateTime?          @default(now())
    updatedAt             DateTime?          @updatedAt
}

model Batch {
    id                  Int                   @id @default(autoincrement())
    productId           Int?
    locationId          Int?
    jobId               Int?
    assemblyId          Int?
    codeMill            String?
    codeSartor          String?
    name                String?
    source              String?
    quantity            Float?
    receivedAt          DateTime?
    notes               String?
    product             Product?              @relation(fields: [productId], references: [id])
    location            Location?             @relation(fields: [locationId], references: [id])
    job                 Job?                  @relation(fields: [jobId], references: [id])
    assembly            Assembly?             @relation(fields: [assemblyId], references: [id])
    ProductMovementLine ProductMovementLine[]
    Variant             Variant?              @relation(fields: [variantId], references: [id])
    variantId           Int?
    // Metadata
    createdBy           String?
    modifiedBy          String?
    createdAt           DateTime?             @default(now())
    updatedAt           DateTime?             @updatedAt
}

model ProductMovement {
    id                  Int                   @id @default(autoincrement())
    movementType        String?
    date                DateTime?
    locationId          Int?
    // New mapped fields (scalars for import mapping)
    assemblyActivityId  Int?
    assemblyId          Int?
    costingId           Int?
    expenseId           Int?
    jobId               Int?
    locationInId        Int?
    locationOutId       Int?
    shippingType        String?
    productId           Int?
    quantity            Float?
    purchaseOrderLineId Int?
    shippingLineId      Int?
    notes               String?
    lines               ProductMovementLine[]
    location            Location?             @relation(fields: [locationId], references: [id])
    // Metadata
    createdBy           String?
    modifiedBy          String?
    createdAt           DateTime?             @default(now())
    updatedAt           DateTime?             @updatedAt
}

model ProductMovementLine {
    id                  Int              @id @default(autoincrement())
    movementId          Int?
    productId           Int?
    batchId             Int?
    costingId           Int?
    productMovementId   Int?
    purchaseOrderLineId Int?
    quantity            Float?
    notes               String?
    movement            ProductMovement? @relation(fields: [movementId], references: [id])
    product             Product?         @relation(fields: [productId], references: [id])
    batch               Batch?           @relation(fields: [batchId], references: [id])
    // Metadata
    createdBy           String?
    modifiedBy          String?
    createdAt           DateTime?        @default(now())
    updatedAt           DateTime?        @updatedAt

    @@index([productId], map: "idx_product_movement_line_product_id")
}

model Job {
    id                      Int                 @id @default(autoincrement())
    projectCode             String?
    name                    String?
    description             String?
    startDate               DateTime?
    endDate                 DateTime?
    status                  String?
    jobType                 String?
    isActive                Boolean?
    notes                   String?
    endCustomerName         String?
    companyId               Int?
    company                 Company?            @relation(fields: [companyId], references: [id])
    locationInId            Int?
    locationOutId           Int?
    locationIn              Location?           @relation("Job_LocationIn", fields: [locationInId], references: [id])
    locationOut             Location?           @relation("Job_LocationOut", fields: [locationOutId], references: [id])
    customerOrderDate       DateTime?
    customerOrderDateManual DateTime?
    cutSubmissionDate       DateTime?
    dropDeadDate            DateTime?
    finishDate              DateTime?
    finishDateManual        DateTime?
    firstInvoiceDate        DateTime?
    targetDate              DateTime?
    customerPoNum           String?
    Variant                 Variant[]
    assemblyActivities      AssemblyActivity[]
    assemblies              Assembly[]          @relation("Job_Assemblies")
    batches                 Batch[]
    // Back-relations
    invoiceLines            InvoiceLine[]
    shipmentLines           ShipmentLine[]
    expenses                Expense[]
    // Back-relations: Purchase Orders
    purchaseOrderLines      PurchaseOrderLine[]
    // Metadata
    createdBy               String?
    modifiedBy              String?
    createdAt               DateTime?           @default(now())
    updatedAt               DateTime?           @updatedAt
}

model SavedView {
    id         Int      @id @default(autoincrement())
    module     String
    name       String
    params     Json
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    createdBy  String?
    modifiedBy String?
}

model AssemblyActivity {
    id                       Int       @id @default(autoincrement())
    assemblyId               Int?
    jobId                    Int?
    name                     String?
    description              String?
    activityType             String?
    activityDate             DateTime?
    startTime                DateTime?
    endTime                  DateTime?
    status                   String?
    notes                    String?
    productId                Int?
    locationInId             Int?
    locationOutId            Int?
    locationIn               Location? @relation("AssemblyActivity_LocationIn", fields: [locationInId], references: [id])
    locationOut              Location? @relation("AssemblyActivity_LocationOut", fields: [locationOutId], references: [id])
    quantity                 Float?
    qtyFabricConsumed        Float?
    qtyFabricConsumedPerUnit Float?
    qtyBreakdown             Int[]     @default([])
    assembly                 Assembly? @relation(fields: [assemblyId], references: [id], name: "Assembly_Activities")
    job                      Job?      @relation(fields: [jobId], references: [id])
    // Metadata
    createdBy                String?
    modifiedBy               String?
    createdAt                DateTime? @default(now())
    updatedAt                DateTime? @updatedAt
}

// --- Auth models ---
model User {
    id             Int             @id @default(autoincrement())
    email          String          @unique
    passwordHash   String
    name           String?
    recordsPerPage Int             @default(25)
    isActive       Boolean         @default(true)
    colorScheme    ColorScheme     @default(light)
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    resets         PasswordReset[]
}

model PasswordReset {
    id        Int       @id @default(autoincrement())
    userId    Int
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    otp       String
    token     String    @unique
    expiresAt DateTime
    usedAt    DateTime?
    createdAt DateTime  @default(now())
}

// --- New data models from FileMaker imports ---

model DHLReportLine {
    id                         Int       @id // a__Serial maps here
    accountName                String?
    awbNumber                  String?
    billedWeight               Float?
    billingAccountNumber       String?
    billingExchangeRate        Float?
    destinationCountryCode     String?
    destinationCountryName     String?
    destinationServiceAreaCode String?
    destinationServiceAreaName String?
    globalProductCode          String?
    globalProductName          String?
    invoiceDate                DateTime?
    invoiceNumber              String?
    numberOfPieces             Int?
    opsConsigneeContactName    String?
    opsConsigneeName           String?
    opsConsignorContactName    String?
    opsConsignorName           String?
    originCountryCode          String?
    originCountryName          String?
    originServiceAreaCode      String?
    originServiceAreaName      String?
    relativePeriod             String?
    shipmentPickUpDate         DateTime?
    shipmentReference          String?
    shipperAccountNumber       String?
    totalRevenueEUR            Float?
    totalRevenueLCY            Float?
    totalTaxEUR                Float?
    totalTaxLCY                Float?
    createdAt                  DateTime? @default(now())
    updatedAt                  DateTime? @updatedAt
}

model ForexLine {
    id           Int      @id @default(autoincrement())
    date         DateTime
    price        Float
    currencyFrom String   @default("USD")
    currencyTo   String   @default("TRY")
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@unique([date, currencyFrom, currencyTo])
}

model Invoice {
    id          Int           @id // a__Serial maps here
    companyId   Int?
    invoiceCode String?       @unique
    date        DateTime?
    notes       String?
    status      String?
    createdBy   String?
    createdAt   DateTime?     @default(now())
    modifiedBy  String?
    updatedAt   DateTime?     @updatedAt
    company     Company?      @relation(fields: [companyId], references: [id])
    lines       InvoiceLine[]
}

model InvoiceLine {
    id                  Int        @id // a__Serial maps here
    costingId           Int?
    expenseId           Int?
    invoiceId           Int?
    jobId               Int?
    productId           Int?
    purchaseOrderLineId Int?
    shippingIdActual    Int?
    shippingIdDuty      Int?
    category            String?
    details             String?
    subCategory         String?
    priceCost           Float?
    priceSell           Float?
    quantity            Float?
    taxCodeId           Int?
    taxRateCost         Float?
    invoicedTotalManual Float?
    createdBy           String?
    createdAt           DateTime?  @default(now())
    modifiedBy          String?
    updatedAt           DateTime?  @updatedAt
    invoice             Invoice?   @relation(fields: [invoiceId], references: [id])
    costing             Costing?   @relation(fields: [costingId], references: [id])
    expense             Expense?   @relation(fields: [expenseId], references: [id])
    job                 Job?       @relation(fields: [jobId], references: [id])
    product             Product?   @relation(fields: [productId], references: [id])
    taxCode             ValueList? @relation("TaxCode", fields: [taxCodeId], references: [id])
}

model Expense {
    id              Int           @id // a__Serial maps here
    jobId           Int?
    productId       Int?
    purchaseOrderId Int?
    shippingId      Int?
    category        String?
    date            DateTime?
    details         String?
    memo            String?
    priceCost       Float?
    priceSell       Float?
    quantity        Float?
    source          String?
    subcategory     String?
    createdBy       String?
    createdAt       DateTime?     @default(now())
    modifiedBy      String?
    updatedAt       DateTime?     @updatedAt
    job             Job?          @relation(fields: [jobId], references: [id])
    product         Product?      @relation(fields: [productId], references: [id])
    shipment        Shipment?     @relation(fields: [shippingId], references: [id])
    // Back-relations
    invoiceLines    InvoiceLine[]
}

model Shipment {
    id                Int            @id // a__Serial maps here
    addressIdShip     Int?
    companyIdCarrier  Int?
    companyIdReceiver Int?
    companyIdSender   Int?
    locationId        Int?
    contactIdReceiver Int?
    date              DateTime?
    dateReceived      DateTime?
    packingSlipCode   String?
    shipmentType      String?
    status            String?
    trackingNo        String?
    type              String? // "In" | "Out"
    createdBy         String?
    createdAt         DateTime?      @default(now())
    modifiedBy        String?
    updatedAt         DateTime?      @updatedAt
    location          Location?      @relation(fields: [locationId], references: [id])
    companyCarrier    Company?       @relation("CarrierCompany", fields: [companyIdCarrier], references: [id])
    companyReceiver   Company?       @relation("ReceiverCompany", fields: [companyIdReceiver], references: [id])
    companySender     Company?       @relation("SenderCompany", fields: [companyIdSender], references: [id])
    addressShip       Address?       @relation("Address_shipments", fields: [addressIdShip], references: [id])
    lines             ShipmentLine[]
    // Back-relations
    expenses          Expense[]
}

model ShipmentLine {
    id           Int         @id // a__Serial maps here
    assemblyId   Int?
    jobId        Int?
    locationId   Int?
    productId    Int?
    shippingId   Int?
    variantSetId Int?
    category     String?
    details      String?
    quantity     Float?
    qtyBreakdown Int[]       @default([]) // parsed from Qty_Breakdown_List_c
    status       String?
    subCategory  String?
    createdBy    String?
    createdAt    DateTime?   @default(now())
    modifiedBy   String?
    updatedAt    DateTime?   @updatedAt
    assembly     Assembly?   @relation(fields: [assemblyId], references: [id])
    job          Job?        @relation(fields: [jobId], references: [id])
    location     Location?   @relation(fields: [locationId], references: [id])
    product      Product?    @relation(fields: [productId], references: [id])
    shipment     Shipment?   @relation(fields: [shippingId], references: [id])
    variantSet   VariantSet? @relation(fields: [variantSetId], references: [id])
}

model Address {
    id                 Int        @id // a__Serial maps here
    companyId          Int?
    contactId          Int?
    addressCountry     String?
    addressCountyState String?
    addressLine1       String?
    addressLine2       String?
    addressLine3       String?
    addressTownCity    String?
    addressZipPostCode String?
    createdBy          String?
    createdAt          DateTime?  @default(now())
    modifiedBy         String?
    updatedAt          DateTime?  @updatedAt
    company            Company?   @relation(fields: [companyId], references: [id])
    shipments          Shipment[] @relation("Address_shipments")
}

// --- Purchase Orders ---

model PurchaseOrder {
    id                 Int                 @id // a__Serial maps here
    companyId          Int?
    consigneeCompanyId Int?
    locationId         Int?
    date               DateTime?
    createdBy          String?
    createdAt          DateTime?           @default(now())
    modifiedBy         String?
    updatedAt          DateTime?           @updatedAt
    company            Company?            @relation(fields: [companyId], references: [id])
    consignee          Company?            @relation("POConsignee", fields: [consigneeCompanyId], references: [id])
    location           Location?           @relation(fields: [locationId], references: [id])
    lines              PurchaseOrderLine[]
}

model PurchaseOrderLine {
    id              Int            @id // a__Serial maps here
    purchaseOrderId Int?
    jobId           Int?
    productId       Int?
    productSkuCopy  String?
    productNameCopy String?
    priceCost       Float?
    priceSell       Float?
    qtyShipped      Float?
    qtyReceived     Float?
    quantity        Float?
    quantityOrdered Float?
    taxCodeId       Int?
    taxRate         Float?
    createdBy       String?
    createdAt       DateTime?      @default(now())
    modifiedBy      String?
    updatedAt       DateTime?      @updatedAt
    purchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
    job             Job?           @relation(fields: [jobId], references: [id])
    product         Product?       @relation(fields: [productId], references: [id])
    taxCode         ValueList?     @relation("POL_TaxCode", fields: [taxCodeId], references: [id])
}
